// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "Request")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xbb, 0xca, 0xc2, 0x30,
	0x18, 0x86, 0xe9, 0xff, 0x17, 0xab, 0x41, 0x97, 0x4c, 0xa5, 0x38, 0x94, 0x4e, 0x5d, 0xda, 0x82,
	0x2e, 0xe2, 0xa6, 0x57, 0x50, 0x3a, 0xba, 0x25, 0xf1, 0x23, 0x09, 0x9a, 0x7c, 0x31, 0x49, 0x85,
	0xde, 0xbd, 0x50, 0x3c, 0x4c, 0xef, 0x61, 0x78, 0x78, 0xc8, 0x26, 0x80, 0x7f, 0x6a, 0x01, 0xad,
	0xf3, 0x18, 0xb1, 0x3a, 0x91, 0x6c, 0x80, 0xc7, 0x08, 0x21, 0xd2, 0x2d, 0x59, 0x45, 0x6d, 0x20,
	0x44, 0x66, 0x5c, 0x9e, 0x94, 0x49, 0xfd, 0x3f, 0xfc, 0x0e, 0x9a, 0x93, 0xcc, 0xb1, 0xe9, 0x8e,
	0xec, 0x9a, 0xff, 0x95, 0x49, 0xbd, 0x1e, 0x3e, 0x73, 0x57, 0x91, 0xb4, 0x47, 0x2b, 0x69, 0x41,
	0xd2, 0x5e, 0x5b, 0x49, 0x97, 0xed, 0x9b, 0x58, 0x7c, 0xdb, 0xf9, 0x78, 0x39, 0x48, 0x1d, 0xd5,
	0xc8, 0x5b, 0x81, 0xa6, 0x13, 0xe8, 0x27, 0x83, 0xd6, 0x23, 0x34, 0x02, 0xb5, 0xe5, 0x2c, 0x40,
	0xa7, 0x58, 0x50, 0x5a, 0xa0, 0x77, 0x0d, 0x07, 0x2b, 0x94, 0x61, 0xfe, 0xd6, 0xcd, 0x8a, 0x7c,
	0x31, 0xc7, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x9c, 0x51, 0x04, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PongClient is the client API for Pong service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PongClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error)
}

type pongClient struct {
	cc *grpc.ClientConn
}

func NewPongClient(cc *grpc.ClientConn) PongClient {
	return &pongClient{cc}
}

func (c *pongClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/Pong/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PongServer is the server API for Pong service.
type PongServer interface {
	Ping(context.Context, *Request) (*Request, error)
}

func RegisterPongServer(s *grpc.Server, srv PongServer) {
	s.RegisterService(&_Pong_serviceDesc, srv)
}

func _Pong_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pong/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pong_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pong",
	HandlerType: (*PongServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pong_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
